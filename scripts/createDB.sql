CREATE SCHEMA IF NOT EXISTS teammanager;

CREATE  TABLE teammanager.tb_person ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	created_at           date DEFAULT current_date  ,
	last_update          date DEFAULT current_date  ,
	finished_at          date   ,
	name                 varchar(256)  NOT NULL ,
	CONSTRAINT pk_tb_person_person_id PRIMARY KEY ( id )
 );

CREATE  TABLE teammanager.tb_role ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	create_at            date DEFAULT current_date  ,
	last_update          date DEFAULT current_date  ,
	name                 varchar(256)  NOT NULL ,
	role_type            varchar(12)  NOT NULL ,
	role_level           varchar(12)  NOT NULL ,
	allocation           decimal DEFAULT 1  ,
	min_value            decimal DEFAULT 0  ,
	max_value            money DEFAULT 1000000  ,
	description          text[]   ,
	CONSTRAINT pk_tb_team_id PRIMARY KEY ( id )
 );

CREATE  TABLE teammanager.tb_team ( 
	id                   integer  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	created_at           date DEFAULT current_date  ,
	last_update          date DEFAULT current_date  ,
	name                 varchar(256)   ,
	manager              varchar(256)   ,
	head                 varchar(256)   ,
	tower                varchar(256)   ,
	CONSTRAINT pk_tb_role_id PRIMARY KEY ( id )
 );

CREATE  TABLE teammanager.tb_teamperson ( 
	team_id              integer  NOT NULL ,
	role_id              integer  NOT NULL ,
	person_id            integer  NOT NULL ,
	created_at           date DEFAULT current_date NOT NULL ,
	last_update          date DEFAULT current_date NOT NULL ,
	current_value        money DEFAULT 0  ,
	CONSTRAINT pk_tb_teamperson_team_id PRIMARY KEY ( team_id, role_id, person_id )
 );

CREATE  TABLE teammanager.tb_teamperson_log ( 
	team_id              integer  NOT NULL ,
	role_id              integer  NOT NULL ,
	person_id            integer  NOT NULL ,
	created_at           date DEFAULT current_date NOT NULL ,
	current_value        money DEFAULT 0  
 );

ALTER TABLE teammanager.tb_teamperson ADD CONSTRAINT fk_tb_teamperson_tb_team FOREIGN KEY ( team_id ) REFERENCES teammanager.tb_team( id );

ALTER TABLE teammanager.tb_teamperson ADD CONSTRAINT fk_tb_teamperson_tb_role FOREIGN KEY ( role_id ) REFERENCES teammanager.tb_role( id );

ALTER TABLE teammanager.tb_teamperson ADD CONSTRAINT fk_tb_teamperson_tb_person FOREIGN KEY ( person_id ) REFERENCES teammanager.tb_person( id );

ALTER TABLE teammanager.tb_teamperson_log ADD CONSTRAINT fk_tb_teamperson_tb_team_0 FOREIGN KEY ( team_id ) REFERENCES teammanager.tb_team( id );

ALTER TABLE teammanager.tb_teamperson_log ADD CONSTRAINT fk_tb_teamperson_tb_role_0 FOREIGN KEY ( role_id ) REFERENCES teammanager.tb_role( id );

ALTER TABLE teammanager.tb_teamperson_log ADD CONSTRAINT fk_tb_teamperson_tb_person_0 FOREIGN KEY ( person_id ) REFERENCES teammanager.tb_person( id );

CREATE OR REPLACE FUNCTION teammanager.change_teamperson()
RETURNS trigger AS $body$
BEGIN
   if (TG_OP = 'UPDATE') then
       INSERT INTO teammanager.tb_teamperson_log (
           team_id,
           role_id,
           person_id,
           current_value
       )
       VALUES(
           OLD.team_id,
		   OLD.role_id,
   		OLD.person_id,
           OLD.current_value
       );

       RETURN NEW;
   elsif (TG_OP = 'DELETE') then
       INSERT INTO teammanager.tb_teamperson_log (
           team_id,
           role_id,
           person_id,
           current_value
       )
       VALUES(
           OLD.team_id,
		   OLD.role_id,
   		OLD.person_id,
           OLD.current_value
       );
        
       RETURN OLD;
   end if;     
END;
$body$
LANGUAGE plpgsql;

CREATE TRIGGER teamperson_trigger
AFTER UPDATE OR DELETE ON teammanager.tb_teamperson
FOR EACH ROW EXECUTE FUNCTION change_teamperson();